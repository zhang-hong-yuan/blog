import{_ as i}from"./index-C58PDwY0.js";import{ao as d,o as r,c as e,a4 as o,F as l,at as a,e as t}from"./@vue-DejhS5Sx.js";import"./element-plus-BrY0m-Us.js";import"./@vueuse-DG8PRMz9.js";import"./@element-plus-BIOyB9cn.js";import"./lodash-es-CapuB_Of.js";import"./@popperjs-Be9rlJlp.js";import"./hammerjs-uHrd7ah6.js";import"./@babel-Cpj98o6Y.js";import"./pinia-B7SS5Sce.js";import"./naive-ui-DvnQ8VCf.js";import"./seemly-BiqVPN66.js";import"./date-fns-x7VUUoCw.js";import"./evtd-CI_DDEu_.js";import"./vooks-BvrI42AR.js";import"./vueuc-DNxWDit6.js";import"./@css-render-Wpowbghw.js";import"./css-render-Ct37b3-v.js";import"./@emotion-WldOFDRm.js";import"./vdirs-DL8EOfHr.js";import"./@juggle-C8OzoCMD.js";import"./@arco-design-CcQ42w85.js";import"./number-precision-BW_FzNZC.js";import"./lodash-DBaaQlBN.js";import"./vue-router-CTzOd6h0.js";import"./jquery-awXEzGOF.js";import"./prismjs-Cy_Hpibq.js";import"./primevue-C3o8vU3d.js";import"./pinia-plugin-persistedstate-RV7uh3T-.js";/* empty css                  *//* empty css                    */const m={},s=a('<h1>逻辑运算符 Logical operators</h1><p>逻辑运算符常用于布尔值之间；当操作数都是布尔值时，返回值也是布尔值。</p><p>不过实际上【&amp;&amp;】和【||】返回的是一个特定的操作数的值，所以当它用于非布尔值的时候，返回值就可能是非布尔值。</p><p>逻辑运算符的描述如下：</p><figure><table><thead><tr><th>运算符</th><th>范例</th><th>描述</th></tr></thead><tbody><tr><td>逻辑非【!】</td><td>【!expr】</td><td>如果操作数能够转换为 【true】 则返回 【false】；否则返回 【true】。</td></tr><tr><td>逻辑与【&amp;&amp;】</td><td>【expr1 &amp;&amp; expr2】</td><td>如果 【expr1】 能被转换为 【false】，那么返回 【expr1】；否则，返回【expr2】。因此，【&amp;&amp;】用于布尔值时，当操作数都为 【true】 时返回 【true】；否则返回 【false】. </td></tr><tr><td>逻辑或【||】</td><td>【expr1 || expr2】</td><td>如果 【expr1】 能被转换为 【true】，那么返回 【expr1】；否则，返回【expr2】。因此，【||】 用于布尔值时，当任何一个操作数为 【true】 则返回 【true】；如果操作数都是 【false】 则返回 【false】。</td></tr><tr><td class="nowrap">空值合并【??】</td><td class="nowrap">【leftExpr ?? rightExpr】</td><td>当左侧的操作数为 【null】 或者 【undefined】 时，返回其右侧操作数，否则返回左侧操作数。</td></tr></tbody></table></figure><p>能被转换为 【false】 的值有 【null】, 【0】, 【NaN】, 空字符串【&quot;&quot;】 和 【undefined】。（译者注：也可以称作”falsy“）</p><h2>短路求值</h2><p>短路运算(逻辑中断)：当有多个表达式(值)时，左边的表达式值可以确定结果时，就不再继续运算右边的表达式的值。</p>',8),n=t("div",null,"【expr1 && expr2】",-1),c=t("ul",null,[t("li",null,"如果第一个表达式的值为真，则返回【expr2】"),t("li",null,"如果第一个表达式的值为假，则返回【expr1】")],-1),u=[n,c],_=t("div",null,"【expr1 || expr2】",-1),h=t("ul",null,[t("li",null,"如果第一个表达式的值为真，则返回【expr1】"),t("li",null,"如果第一个表达式的值为假，则返回【expr2】")],-1),x=[_,h];function f(v,b){const p=d("brace");return r(),e(l,null,[s,o((r(),e("div",null,u)),[[p,void 0,"both"]]),o((r(),e("div",null,x)),[[p,void 0,"both"]])],64)}const Y=i(m,[["render",f]]);export{Y as default};
