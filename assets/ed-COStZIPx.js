import{_ as i}from"./index-C58PDwY0.js";import{ao as r,o as s,c as e,a4 as l,q as n,F as d,e as t}from"./@vue-DejhS5Sx.js";import"./element-plus-BrY0m-Us.js";import"./@vueuse-DG8PRMz9.js";import"./@element-plus-BIOyB9cn.js";import"./lodash-es-CapuB_Of.js";import"./@popperjs-Be9rlJlp.js";import"./hammerjs-uHrd7ah6.js";import"./@babel-Cpj98o6Y.js";import"./pinia-B7SS5Sce.js";import"./naive-ui-DvnQ8VCf.js";import"./seemly-BiqVPN66.js";import"./date-fns-x7VUUoCw.js";import"./evtd-CI_DDEu_.js";import"./vooks-BvrI42AR.js";import"./vueuc-DNxWDit6.js";import"./@css-render-Wpowbghw.js";import"./css-render-Ct37b3-v.js";import"./@emotion-WldOFDRm.js";import"./vdirs-DL8EOfHr.js";import"./@juggle-C8OzoCMD.js";import"./@arco-design-CcQ42w85.js";import"./number-precision-BW_FzNZC.js";import"./lodash-DBaaQlBN.js";import"./vue-router-CTzOd6h0.js";import"./jquery-awXEzGOF.js";import"./prismjs-Cy_Hpibq.js";import"./primevue-C3o8vU3d.js";import"./pinia-plugin-persistedstate-RV7uh3T-.js";/* empty css                  *//* empty css                    */const c={},u=t("h1",null,"string.includes()",-1),a=t("p",null,"该方法用于判断《字符串是否包含指定的子字符串》。",-1),h=t("dl",null,[t("dt",null,"【searchString】"),t("dd",null,'一个要在 【string】 中查找的字符串。不能是《正则表达式》。所有非字符串的值都会《被强制转换为字符串》，因此如果该参数被省略或传入 【undefined】，【includes()】 方法会在字符串中搜索 【《"undefined"》】。 '),t("dt",null,[n("【position】"),t("span",{class:"optional"},"可选")]),t("dd",null,"在字符串中开始搜索 【searchString】 的《a;;位置》。默认值为 【《a;;0》】。")],-1),p=t("br",null,null,-1),_=t("p",null,"如果在给定的字符串中找到了要搜索的字符串（包括 【searchString】 为空字符串的情况），则返回 【《b;;true》】，否则返回 【《b;;false》】。",-1),g=t("p",null,"另外，【includes()】方法是《区分大小写的::是否区分大小写》：",-1),m=t("h6",null,"示例：",-1),f=t("hr",null,null,-1),W=t("h1",null,"string.startsWith()",-1),b=t("p",null,"该方法用于《检测字符串是否以指定的子字符串开始》。如果是以指定的子字符串开头返回 【《d;;true》】，否则 【《d;;false》】。该方法《区分::是否区分》大小写。",-1),S=t("dl",null,[t("dt",null,"【searchvalue】"),t("dd",null,'要在该字符串开头搜索的子串。不能是《正则表达式》。所有不是字符串的值都会《被强制转换为字符串》，因此省略它或传递 【undefined】 将导致 【startsWith()】 搜索字符串 【《"undefined"》】。 '),t("dt",null,[n("【start】"),t("span",{class:"optional"},"可选")]),t("dd",null,"期望被找到的起始位置（即 【searchString】 的第一个字符的索引）。默认为 【《0》】。")],-1),v=t("h6",null,"示例：",-1),j=t("hr",null,null,-1),T=t("h1",null,"string.endsWith()",-1),B=t("p",null,"该方法用来《判断当前字符串是否是以指定的子字符串结尾的》。如果传入的子字符串在搜索字符串的末尾则返回 【《e;;true》】，否则将返回 【《e;;false》】。该方法《区分::是否区分》大小写。",-1),x=t("dl",null,[t("dt",null,"【searchString】"),t("dd",null,'要搜索的作为结尾的字符串(包括空字符串)，不能是《正则表达式》。所有非字符串的值都会《被强制转换为字符串》，因此如果该参数被省略或传入 【undefined】，【endsWith()】 方法会在字符串中搜索 【《"undefined"》】。'),t("dt",null,[n("【endPosition】"),t("span",{class:"optional"},"可选")]),t("dd",null,"预期找到 【searchString】 的末尾位置（即 【searchString】 最后一个字符的索引加 1）。默认为 【《string.length》】。")],-1),q=t("h6",null,"示例：",-1);function k(w,D){const o=r("code");return s(),e(d,null,[u,a,l((s(),e("pre",null,[n(`string.includes(searchString)
string.includes(searchString, position)`)])),[[o,void 0,"js"]]),h,p,_,g,l((s(),e("pre",null,[n(`"Blue Whale".includes("blue");               // 返回 《c;;false》
"Blue Whale".toLowerCase().includes("blue"); // 返回 《c;;true》`)])),[[o,void 0,"js"]]),m,l((s(),e("pre",null,[n(`const str = "To be, or not to be, that is the question.";

console.log(str.includes("To be"));       // true
console.log(str.includes("question"));    // true
console.log(str.includes("nonexistent")); // false
console.log(str.includes("To be", 1));    // false
console.log(str.includes("TO BE"));       // false
console.log(str.includes(""));            // 《true》`)])),[[o,void 0,"js"]]),f,W,b,l((s(),e("pre",null,[n(`string.startsWith(searchString)
string.startsWith(searchString, position)`)])),[[o,void 0,"js"]]),S,v,l((s(),e("pre",null,[n(`const str = "To be, or not to be, that is the question.";

console.log(str.startsWith("To be"));         // true
console.log(str.startsWith("not to be"));     // false
console.log(str.startsWith("not to be", 10)); // true`)])),[[o,void 0,"js"]]),j,T,B,l((s(),e("pre",null,[n(`string.endsWith(searchString)
string.endsWith(searchString, endPosition)`)])),[[o,void 0,"js"]]),x,q,l((s(),e("pre",null,[n(`const str = "生存还是毁灭，这是一个问题。";

console.log(str.endsWith("问题。"));   // true
console.log(str.endsWith("毁灭"));    // false
console.log(str.endsWith("毁灭", 6)); // true`)])),[[o,void 0,"js"]])],64)}const rt=i(c,[["render",k]]);export{rt as default};
