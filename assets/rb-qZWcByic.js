import{_ as s}from"./index-C58PDwY0.js";import{ao as n,o as e,c as t,a4 as r,q as o,F as a,at as l,e as c}from"./@vue-DejhS5Sx.js";import"./element-plus-BrY0m-Us.js";import"./@vueuse-DG8PRMz9.js";import"./@element-plus-BIOyB9cn.js";import"./lodash-es-CapuB_Of.js";import"./@popperjs-Be9rlJlp.js";import"./hammerjs-uHrd7ah6.js";import"./@babel-Cpj98o6Y.js";import"./pinia-B7SS5Sce.js";import"./naive-ui-DvnQ8VCf.js";import"./seemly-BiqVPN66.js";import"./date-fns-x7VUUoCw.js";import"./evtd-CI_DDEu_.js";import"./vooks-BvrI42AR.js";import"./vueuc-DNxWDit6.js";import"./@css-render-Wpowbghw.js";import"./css-render-Ct37b3-v.js";import"./@emotion-WldOFDRm.js";import"./vdirs-DL8EOfHr.js";import"./@juggle-C8OzoCMD.js";import"./@arco-design-CcQ42w85.js";import"./number-precision-BW_FzNZC.js";import"./lodash-DBaaQlBN.js";import"./vue-router-CTzOd6h0.js";import"./jquery-awXEzGOF.js";import"./prismjs-Cy_Hpibq.js";import"./primevue-C3o8vU3d.js";import"./pinia-plugin-persistedstate-RV7uh3T-.js";/* empty css                  *//* empty css                    */const d={},m=l("<h1>计时器</h1><p>通过使用 JavaScript，能做到在一个设定的时间间隔之后来执行代码，而不是在函数被调用后立即执行。我们称之为计时事件。两个关键方法是:</p><ul><li><code>setInterval()</code> 间隔指定的毫秒数不停地执行指定的代码。</li><li><code>setTimeout()</code> 在指定的毫秒数后执行指定代码。</li></ul><blockquote><strong>注意:</strong> <code>setInterval()</code> 和 <code>setTimeout()</code> 是 HTML DOM Window对象的两个方法。 </blockquote><br><h3>setInterval()</h3>",6),p=l("<ul><li><code>javascript function</code> 函数。直接写 <u>函数</u> ，或者写 <u>函数名</u> 或者采取字符串 <u>‘函数名()&#39;</u> 三种形式。</li><li><code>milliseconds</code> 间隔的毫秒数(注意: 1000 毫秒是一秒)默认是 0</li></ul><p><code>clearInterval()</code> 方法用于停止 <code>setInterval()</code> 方法执行的函数代码。</p>",2),u=c("p",null,[o("要使用 "),c("code",null,"clearInterval()"),o(" 方法, 在创建计时方法时你必须使用全局变量：(值是一个id数字)")],-1),v=c("br",null,null,-1),_=c("h3",null,"setTimeout()",-1),h=c("p",null,"setTimeout() 方法会返回某个值。在下面的语句中，值被储存在名为 myVar 的变量中。假如你希望取消这个 setTimeout()，你可以使用这个变量名来指定它。",-1),T=l("<ul><li><code>javascript function</code> 含有 JavaScript 语句的字符串</li><li><code>milliseconds</code> 从当前起多少毫秒后执行第一个参数(提示：1000 毫秒等于一秒)</li></ul><p><code>clearTimeout()</code> 方法用于停止执行 <code>setTimeout()</code> 方法的函数代码。</p><p>要使用 <code>clearTimeout()</code> 方法, 在创建超时方法中(setTimeout)使用全局变量:</p>",3);function f(j,w){const i=n("code");return e(),t(a,null,[m,r((e(),t("pre",null,[o(`window.setInterval("javascript function", milliseconds);
`)])),[[i,void 0,"js"]]),p,r((e(),t("pre",null,[o(`window.clearInterval(intervalVariable)
`)])),[[i,void 0,"js"]]),u,r((e(),t("pre",null,[o(`myVar = setInterval("javascript function", milliseconds);
`)])),[[i,void 0,"js"]]),v,_,h,r((e(),t("pre",null,[o(`myVar= window.setTimeout("javascript function", milliseconds);
`)])),[[i,void 0,"js"]]),T,r((e(),t("pre",null,[o(`window.clearTimeout(timeoutVariable)
`)])),[[i,void 0,"js"]])],64)}const Z=s(d,[["render",f]]);export{Z as default};
