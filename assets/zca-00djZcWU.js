import{_ as e}from"./index-C58PDwY0.js";import{ao as n,o as t,c as i,a4 as p,q as m,F as s,e as o}from"./@vue-DejhS5Sx.js";import"./element-plus-BrY0m-Us.js";import"./@vueuse-DG8PRMz9.js";import"./@element-plus-BIOyB9cn.js";import"./lodash-es-CapuB_Of.js";import"./@popperjs-Be9rlJlp.js";import"./hammerjs-uHrd7ah6.js";import"./@babel-Cpj98o6Y.js";import"./pinia-B7SS5Sce.js";import"./naive-ui-DvnQ8VCf.js";import"./seemly-BiqVPN66.js";import"./date-fns-x7VUUoCw.js";import"./evtd-CI_DDEu_.js";import"./vooks-BvrI42AR.js";import"./vueuc-DNxWDit6.js";import"./@css-render-Wpowbghw.js";import"./css-render-Ct37b3-v.js";import"./@emotion-WldOFDRm.js";import"./vdirs-DL8EOfHr.js";import"./@juggle-C8OzoCMD.js";import"./@arco-design-CcQ42w85.js";import"./number-precision-BW_FzNZC.js";import"./lodash-DBaaQlBN.js";import"./vue-router-CTzOd6h0.js";import"./jquery-awXEzGOF.js";import"./prismjs-Cy_Hpibq.js";import"./primevue-C3o8vU3d.js";import"./pinia-plugin-persistedstate-RV7uh3T-.js";/* empty css                  *//* empty css                    */const l={},c=o("h1",null,"【for】 循环",-1),a=o("p",null,"一个 【for】 循环会一直重复执行，直到指定的循环条件【condition】为 【false】。",-1),d=o("p",null,"当一个 【for】 循环执行的时候，会发生以下过程：",-1),_=o("ol",null,[o("li",null,"如果有初始化表达式 【initialExpression】，它将被执行。这个表达式通常会初始化一个或多个循环计数器，但语法上是允许一个任意复杂度的表达式的。这个表达式也可以声明变量。"),o("li",null,"计算 【condition】 表达式的值。如果 【condition】 的值是 true，循环中的语句会被执行。如果 【condition】 的值是 false，【for】 循环终止。如果 【condition】 表达式整个都被省略掉了，condition 的值会被认为是 true。"),o("li",null,"循环中的 【statement】 被执行。如果需要执行多条语句，可以使用块(【{ ... }】)来包裹这些语句。"),o("li",null,"如果有更新表达式 【incrementExpression】，执行更新表达式。"),o("li",null,"回到步骤 2。")],-1);function u(f,x){const r=n("code");return t(),i(s,null,[c,a,p((t(),i("pre",null,[m(`for ([initialExpression]; [condition]; [incrementExpression]) 
	statement`)])),[[r,void 0,"js"]]),d,_],64)}const U=e(l,[["render",u]]);export{U as default};
