import{_ as n}from"./index-C58PDwY0.js";import{ao as d,o as t,c as l,a4 as c,q as o,F as r,e,at as p}from"./@vue-DejhS5Sx.js";import"./element-plus-BrY0m-Us.js";import"./@vueuse-DG8PRMz9.js";import"./@element-plus-BIOyB9cn.js";import"./lodash-es-CapuB_Of.js";import"./@popperjs-Be9rlJlp.js";import"./hammerjs-uHrd7ah6.js";import"./@babel-Cpj98o6Y.js";import"./pinia-B7SS5Sce.js";import"./naive-ui-DvnQ8VCf.js";import"./seemly-BiqVPN66.js";import"./date-fns-x7VUUoCw.js";import"./evtd-CI_DDEu_.js";import"./vooks-BvrI42AR.js";import"./vueuc-DNxWDit6.js";import"./@css-render-Wpowbghw.js";import"./css-render-Ct37b3-v.js";import"./@emotion-WldOFDRm.js";import"./vdirs-DL8EOfHr.js";import"./@juggle-C8OzoCMD.js";import"./@arco-design-CcQ42w85.js";import"./number-precision-BW_FzNZC.js";import"./lodash-DBaaQlBN.js";import"./vue-router-CTzOd6h0.js";import"./jquery-awXEzGOF.js";import"./prismjs-Cy_Hpibq.js";import"./primevue-C3o8vU3d.js";import"./pinia-plugin-persistedstate-RV7uh3T-.js";/* empty css                  *//* empty css                    */const u={},m=e("h2",null,"元素操作",-1),s=e("h3",null,"遍历元素",-1),_=e("p",null,"jQuery 隐式迭代是对同一类元素做了同样的操作。 如果想要给同一类元素做不同操作，就需要用到遍历。",-1),a=e("p",null,[e("code",null,"each()"),o(" 方法遍历匹配的每一个元素。主要用于DOM处理。")],-1),h=e("ul",null,[e("li",null,[e("code",null,"index"),o(" 是每个元素的索引号")]),e("li",null,[e("code",null,"demEle"),o(" 是每个DOM元素对象，不是jquery对象(要使用jquery方法，需要转换为jquery对象)")])],-1),j=e("blockquote",null,[e("p",null,"函数体中的this指代每一个dom元素，与domEle等价")],-1),q=e("p",null,[e("code",null,"$.each()"),o(" 方法可用于遍历任何对象。主要用于数据处理，比如数组，对象。")],-1),f=e("ul",null,[e("li",null,"注：参数同上")],-1),b=e("br",null,null,-1),v=e("h3",null,"创建元素",-1),x=e("p",null,"动态的创建了一个 li",-1),y=e("p",null,[e("strong",null,"jQuery 对象拷贝："),o("如果要把某个对象拷贝(合并)给另外一个对象使用，可以使用 "),e("code",null,"$.extend()"),o(" 方法")],-1),$=p("<ul><li><code>deep</code> 如果设为true 为深拷贝， 默认为false 浅拷贝</li><li><code>target</code> 要拷贝的目标对象</li><li><code>object1</code> 待拷贝到第一个对象的对象</li></ul><blockquote><p>objectN 里面的属性会覆盖 target 里面的属性。</p></blockquote><h3>添加元素</h3><p>内部(append、prepend)添加元素，生成之后，它们是父子关系。外部(after、before)添加元素，生成之后，他们是兄弟关系。</p><ul><li><code>element.append(&quot;内容&quot;)</code> 把内容放入匹配元素内部最后面，类似原生 appendChild</li><li><code>element.prepend(&quot;内容&quot;)</code> 把内容放入匹配元素内部最前面</li><li><code>element.after(&quot;内容&quot;)</code> 把内容放入目标元素后面</li><li><code>element.before(&quot;内容&quot;)</code> 把内容放入目标元素前面</li></ul><h3>删除元素</h3><p><code>empty()</code> 和 <code>html(&#39;&#39;)</code> 作用等价，都可以删除元素里面的内容，不过 html 还可以设置内容。</p><ul><li><code>element.remove()</code> 删除匹配的元素及其子元素(标签和内容一起删除)</li><li><code>element.empty()</code> 清空匹配的元素(保留标签)</li><li><code>element.html(&#39;&#39;)</code> 清空匹配的元素内容(保留标签)</li></ul>",8);function g(k,E){const i=d("code");return t(),l(r,null,[m,s,_,a,c((t(),l("pre",null,[o('$("div").each(function(index, domEle) { ... })')])),[[i,void 0,"js"]]),h,j,q,c((t(),l("pre",null,[o("$.each(object，function(index, domEle) { ... })")])),[[i,void 0,"js"]]),f,b,v,x,c((t(),l("pre",null,[o('$("<li>123</li>");')])),[[i,void 0,"js"]]),y,c((t(),l("pre",null,[o("$.extend([deep], target, object1, [object2, object3, ... ])")])),[[i,void 0,"js"]]),$],64)}const ie=n(u,[["render",g]]);export{ie as default};
