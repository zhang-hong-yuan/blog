import{_ as a}from"./index-C58PDwY0.js";import{ao as i,o as e,c as s,e as n,q as t,a4 as l,F as c}from"./@vue-DejhS5Sx.js";import"./element-plus-BrY0m-Us.js";import"./@vueuse-DG8PRMz9.js";import"./@element-plus-BIOyB9cn.js";import"./lodash-es-CapuB_Of.js";import"./@popperjs-Be9rlJlp.js";import"./hammerjs-uHrd7ah6.js";import"./@babel-Cpj98o6Y.js";import"./pinia-B7SS5Sce.js";import"./naive-ui-DvnQ8VCf.js";import"./seemly-BiqVPN66.js";import"./date-fns-x7VUUoCw.js";import"./evtd-CI_DDEu_.js";import"./vooks-BvrI42AR.js";import"./vueuc-DNxWDit6.js";import"./@css-render-Wpowbghw.js";import"./css-render-Ct37b3-v.js";import"./@emotion-WldOFDRm.js";import"./vdirs-DL8EOfHr.js";import"./@juggle-C8OzoCMD.js";import"./@arco-design-CcQ42w85.js";import"./number-precision-BW_FzNZC.js";import"./lodash-DBaaQlBN.js";import"./vue-router-CTzOd6h0.js";import"./jquery-awXEzGOF.js";import"./prismjs-Cy_Hpibq.js";import"./primevue-C3o8vU3d.js";import"./pinia-plugin-persistedstate-RV7uh3T-.js";/* empty css                  *//* empty css                    */const r={},p=n("h1",null,"Custom Class",-1),u=n("p",null,"This plugin allows you to prefix Prism's default classes (‘.comment’ can become ‘.namespace--comment’) or replace them with your defined ones (like ‘.editor__comment’). You can even add new classes.",-1),d=n("h2",null,"Motivation",-1),m=n("p",null,"Prism default classes are sensible but fixed and too generic. This plugin provide some ways to customize those classes to suit your needs. Example usages:",-1),h=n("p",null,"You need more granular control about the classes of certain tokens. You can define functions which will add new classes to tokens, so selectively change the highlighting of certain parts of your code.",-1),_=n("h2",null,"How to use",-1),g=n("p",null,"Prefix all Prism classes",-1),f=n("p",null,"Replace some Prism classes with ones you defined",-1),v=n("p",null,"Alternatively you can also pass a function that takes the original class and returns the mapped class. This function can also be used implement language specific mapped classes. Example:",-1),y=n("h2",null,"Add new classes",-1),w=n("p",null,"You can add new classes with per-token and per-language precision.",-1),k=n("p",null,"Note: The given ‘content’ is the inner HTML of the current token. All ‘<’ and ‘<’ characters are escaped and it might contain the HTML code of nested tokens.",-1),b=n("h2",null,"Notes",-1),j=n("p",null,[t("Feature functions must be called "),n("strong",null,"AFTER"),t(" Prism and this plugin. For example:")],-1),x=n("h3",null,"CSS Modules Usage:",-1),P=n("p",null,"The initial purpose of this plugin is to be used with CSS Modules. It works perfectly with the class map object returned by CSS Modules. For example:",-1),C=n("p",null,[t("Note: This plugin only affects generated token elements (usually of the form ‘span.token’). The classes of ‘code’ and ‘pre’ elements as well as all elements generated by other plugins (e.g. "),n("ins",null,"Toolbar"),t(" elements and "),n("ins",null,"line number"),t(" elements) will not be changed. ")],-1),T=n("br",null,null,-1),M=n("hr",null,null,-1),N=n("h2",null,"Example",-1),S=n("br",null,null,-1),Y=n("h4",null,"Prefix and map classes",-1),E=n("p",null,"Input",-1),F=n("p",null,"Options",-1),A=n("p",null,"Output",-1),O=n("p",null,"Note that this plugin only affects tokens. The classes of the ‘code’ and ‘pre’ elements won't be prefixed.",-1),B=n("br",null,null,-1),H=n("h4",null,"Add new classes",-1),I=n("p",null,"Input",-1),R=n("p",null,"Options",-1),D=n("p",null,"Output",-1);function L(V,q){const o=i("code");return e(),s(c,null,[p,u,d,m,n("p",null,[t("You want to add namespace for all of them (like "),l((e(),s("code",null,[t(".prism--comment")])),[[o,void 0,void 0,{js:!0}]]),t(") to avoid conflict with your existing classes.")]),n("p",null,[t("You use a naming convention (like BEM). You want to write classes like "),l((e(),s("code",null,[t(".editor__comment")])),[[o,void 0,void 0,{js:!0}]]),t(". You use CSS Modules. You want to use your hashed classes, like "),l((e(),s("code",null,[t(".comment_7sh3a")])),[[o,void 0,void 0,{js:!0}]]),t(".")]),h,_,g,n("pre",null,[t("			"),l((e(),s("code",null,[t("Prism.plugins.customClass.prefix('prism--')")])),[[o,void 0,void 0,{js:!0}]]),t(`
		`)]),f,n("pre",null,[t(""),l((e(),s("code",null,[t(`
Prism.plugins.customClass.map({
  keyword: 'special-keyword',
  string: 'string_ch29s',
  comment: 'comment_93jsa'
})
`)])),[[o,void 0,void 0,{js:!0}]]),t(`
		`)]),n("p",null,[t("Object's keys are the classes you want to replace (eg: "),l((e(),s("code",null,[t("comment")])),[[o,void 0,void 0,{js:!0}]]),t("), with their values being the classes you want to use (eg: "),l((e(),s("code",null,[t("my-comment")])),[[o,void 0,void 0,{js:!0}]]),t("). Classes which are not specified will stay as they are.")]),v,n("pre",null,[t(""),l((e(),s("code",null,[t(`
	Prism.plugins.customClass.map((className, language) => {
  if (language === 'css') {
    return cssSpecificMap[className] || className
  } else {
    return className
  }
})
`)])),[[o,void 0,void 0,{js:!0}]]),t(`
`)]),y,w,n("pre",null,[t(""),l((e(),s("code",null,[t(`
	Prism.plugins.customClass.add(({content, type, language}) => {
  if (content === 'content' && type === 'property' && language === 'css') {
    return 'content-property'
  }
})
`)])),[[o,void 0,void 0,{js:!0}]]),t(`
`)]),k,b,j,n("pre",null,[t(""),l((e(),s("code",null,[t(`
	<!-- 1. load prism -->
<script src="prism.js"><\/script>
<!-- 2. load the plugin if you don't include it inside prism when download -->
<script src="plugins/custom-class/custom-class.js"><\/script>
<!-- 3. call the feature you want to use -->
<script>
	Prism.plugins.customClass.map(myClassMap);
	Prism.plugins.customClass.prefix(myPrefixString);
<\/script>
`)])),[[o,void 0,void 0,{html:!0}]]),t(`
	`)]),n("p",null,[t("In most cases, using 1 feature is enough. However, it is possible to use both of them together if you want (Result will be like "),l((e(),s("code",null,[t(".my-namespace--comment_93jsa")])),[[o,void 0,void 0,{js:!0}]]),t(").")]),x,P,n("pre",null,[t(""),l((e(),s("code",null,[t(`
	import Prism from 'prismjs'
import classMap from 'styles/editor-class-map.css'

Prism.plugins.customClass.map(classMap)
`)])),[[o,void 0,void 0,{js:!0}]]),t(`
		`)]),C,T,M,N,S,Y,E,n("pre",null,[t(`
`),l((e(),s("code",null,[t(`
	<pre class="language-javascript">
	<code>
		var foo = 'bar';
	</code>
</pre>

`)])),[[o,void 0,void 0,{html:!0}]]),t(`
	`)]),F,n("pre",null,[t(`
`),l((e(),s("code",null,[t(`
	Prism.plugins.customClass.map({
	keyword: 'special-keyword',
	string: 'my-string'
});

Prism.plugins.customClass.prefix('pr-');

`)])),[[o,void 0,void 0,{js:!0}]]),t(`
`)]),A,n("pre",null,[t(`
`),l((e(),s("code",null,[t(`
	<pre class="language-javascript">
	<code class="language-markup">
		<span class="pr-token pr-special-keyword">var</span>
		foo
		<span class="pr-token pr-operator">=</span>
		<span class="pr-token pr-my-string">'bar'</span>
		<span class="pr-token pr-punctuation">;</span>
	</code>
</pre>

`)])),[[o,void 0,void 0,{html:!0}]]),t(`
`)]),O,B,H,I,n("pre",null,[t(`
`),l((e(),s("code",null,[t(`
	<pre class="language-css">
	<code>
		a::after {
			content: '\\2b00 ';
			opacity: .7;
		}
	</code>
</pre>
`)])),[[o,void 0,void 0,{html:!0}]]),t(`

	`)]),R,n("pre",null,[t(""),l((e(),s("code",null,[t(`
	Prism.plugins.customClass.add(({language, type, content}) => {
	if (content === 'content' && type === 'property' && language === 'css') {
		return 'content-property'
	}
})
`)])),[[o,void 0,void 0,{js:!0}]]),t(`
	`)]),D,n("pre",null,[t(`
`),l((e(),s("code",null,[t(`
	<pre class=" language-css">
	<code class=" language-css">
		<span class="token selector">a::after</span>
		<span class="token punctuation">{</span>
			<span class="token property content-property">content</span>
			<span class="token punctuation">:</span>
			<span class="token string">'\\2b00 '</span>
			<span class="token punctuation">;</span>
			<span class="token property">opacity</span>
			<span class="token punctuation">:</span>
			.7
			<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	</code>
</pre>

`)])),[[o,void 0,void 0,{html:!0}]]),t(`
	`)])],64)}const kt=a(r,[["render",L]]);export{kt as default};
