import{_ as t}from"./index-C58PDwY0.js";import{at as r}from"./@vue-DejhS5Sx.js";import"./element-plus-BrY0m-Us.js";import"./@vueuse-DG8PRMz9.js";import"./@element-plus-BIOyB9cn.js";import"./lodash-es-CapuB_Of.js";import"./@popperjs-Be9rlJlp.js";import"./hammerjs-uHrd7ah6.js";import"./@babel-Cpj98o6Y.js";import"./pinia-B7SS5Sce.js";import"./naive-ui-DvnQ8VCf.js";import"./seemly-BiqVPN66.js";import"./date-fns-x7VUUoCw.js";import"./evtd-CI_DDEu_.js";import"./vooks-BvrI42AR.js";import"./vueuc-DNxWDit6.js";import"./@css-render-Wpowbghw.js";import"./css-render-Ct37b3-v.js";import"./@emotion-WldOFDRm.js";import"./vdirs-DL8EOfHr.js";import"./@juggle-C8OzoCMD.js";import"./@arco-design-CcQ42w85.js";import"./number-precision-BW_FzNZC.js";import"./lodash-DBaaQlBN.js";import"./vue-router-CTzOd6h0.js";import"./jquery-awXEzGOF.js";import"./prismjs-Cy_Hpibq.js";import"./primevue-C3o8vU3d.js";import"./pinia-plugin-persistedstate-RV7uh3T-.js";/* empty css                  *//* empty css                    */const o={},i=r('<h1>一元操作符 Unary operators</h1><p>一元操作符仅对应一个操作数。</p><figure><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>自增(【++】)</td><td>一元运算符。将操作数的值加一。 <ul><li>如果放在操作数前面(【++x】)，则返回加一后的值</li><li>如果放在操作数后面(【x++】)，则返回操作数原值，然后再将操作数加一</li></ul></td><td>【var x = 3;】<br>【console.log(++x); //4】<br>【console.log(x); //4】<br><br>【var y = 3;】<br>【console.log(y++); //3】<br>【console.log(y); //4】</td></tr><tr><td>自减(【--】)</td><td>一元运算符。将操作数的值减一。前后缀两种用法的返回值类似自增运算符。</td><td>【var x = 3;】<br>【console.log(--x);】<br>【// 输出 2,x=2】 <br><br>【var y = 3;】<br>【console.log(y--);】<br>【// 输出 3,x=2;【</td></tr><tr><td>一元负值符(【-】)</td><td>一元运算符，返回操作数的负值。</td><td>【var x = 3;】<br>【console.log(-x);】<br>【// 输出 -3】</td></tr><tr><td class="nowrap">一元正值符(【+】)</td><td>一元运算符，如果操作数在之前不是数值，试图将其转换为数值。</td><td class="nowrap">【console.log( +&#39;3&#39; ); // 3】<br>【console.log( &#39;3&#39; ); // &#39;3&#39;】<br>【console.log(+true); // 1】 </td></tr></tbody></table></figure><p><strong>注意：</strong>递增和递减运算符必须和变量配合使用</p><ul><li>前置递增运算符：先自加，后返回值</li><li>后置递增运算符：先返回原值，后自加</li></ul>',5);function p(l,m){return i}const H=t(o,[["render",p]]);export{H as default};
