import{_ as e}from"./index-C58PDwY0.js";import{ao as l,o as n,c as s,a4 as r,q as o,F as p,e as t}from"./@vue-DejhS5Sx.js";import"./element-plus-BrY0m-Us.js";import"./@vueuse-DG8PRMz9.js";import"./@element-plus-BIOyB9cn.js";import"./lodash-es-CapuB_Of.js";import"./@popperjs-Be9rlJlp.js";import"./hammerjs-uHrd7ah6.js";import"./@babel-Cpj98o6Y.js";import"./pinia-B7SS5Sce.js";import"./naive-ui-DvnQ8VCf.js";import"./seemly-BiqVPN66.js";import"./date-fns-x7VUUoCw.js";import"./evtd-CI_DDEu_.js";import"./vooks-BvrI42AR.js";import"./vueuc-DNxWDit6.js";import"./@css-render-Wpowbghw.js";import"./css-render-Ct37b3-v.js";import"./@emotion-WldOFDRm.js";import"./vdirs-DL8EOfHr.js";import"./@juggle-C8OzoCMD.js";import"./@arco-design-CcQ42w85.js";import"./number-precision-BW_FzNZC.js";import"./lodash-DBaaQlBN.js";import"./vue-router-CTzOd6h0.js";import"./jquery-awXEzGOF.js";import"./prismjs-Cy_Hpibq.js";import"./primevue-C3o8vU3d.js";import"./pinia-plugin-persistedstate-RV7uh3T-.js";/* empty css                  *//* empty css                    */const c={},a=t("h1",null,"string.split()",-1),m=t("p",null,[o("该方法用于把一个《字符串》分割成《字符串"),t("ins",null,"数组"),o('》。如果把空字符串 【""】 用作分隔符，那么《字符串中的每个字符之间都会被分割》。此方法《不改变::是否改变》原始字符串。')],-1),d=t("p",null,"可以传递一个正则表达式作为参数，这样方法会根据正则表达式去拆分字符串。正则表达式即使不指定全局匹配，也会《全都拆分》。",-1),_={class:"nocopy"},u=t("dl",null,[t("dt",null,[o("【separator】"),t("span",{class:"optional"},"可选")]),t("dd",null,"《a;;字符串》或《a;;正则表达式》，从该参数指定的地方分割字符串。省略【separator】或传递【undefined】会导致【split()】返回《一个只包含所调用字符串数组》，结果中《不包括::是否包括》 【separator】。"),t("dt",null,[o("【limit】"),t("span",{class:"optional"},"可选")]),t("dd",null,"一个《非负整数::什么类型的数字》，该参数可指定《返回的数组的最大长度》。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，《整个字符串都会被分割，不考虑它的长度》。")],-1),h=t("br",null,null,-1),g=t("h5",null,"示例：",-1),f=t("p",null,'当字符串为空并且指定了一个非空的分隔符，【split()】 返回 【《[""]》】。如果字符串和分隔符都是空字符串，将返回《一个空数组》。',-1),S=t("section",{class:"note"},[t("header",null,[o("备注："),t("span",null,'【《"".split("")》】 是唯一一种字符串作为 【separator】 参数传入的生成《空数组》的方法。')])],-1),v=t("br",null,null,-1),y=t("h5",null,"使用 【RegExp】 来分割使结果中包含分割符",-1),x=t("p",null,"如果 【separator】 包含捕获括号 【( )】，则《其匹配结果将被拼接到输出数组中》。",-1);function b(j,w){const i=l("code");return n(),s(p,null,[a,m,d,r((n(),s("pre",_,[o(`string.split()
string.split(separator)
string.split(separator, limit)`)])),[[i,void 0,"js"]]),u,h,g,f,r((n(),s("pre",null,[o(`const emptyString = "";

// 字符串是空的，分隔符是非空的
console.log(emptyString.split("a")); // 《[""]》

// 字符串和分隔符都是空的
console.log(emptyString.split(emptyString)); // 《[]》`)])),[[i,void 0,"js"]]),S,v,y,x,r((n(),s("pre",null,[o(`const myString = "Hello 1 word. Sentence number 2.";
const splits = myString.split(/(\\d)/);

console.log(splits);
// 《[ "Hello ", "1", " word. Sentence number ", "2", "." ]》`)])),[[i,void 0,"js"]])],64)}const nt=e(c,[["render",b]]);export{nt as default};
