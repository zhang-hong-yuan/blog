import{_ as m}from"./index-C58PDwY0.js";import{ao as s,o as t,c as o,a4 as e,q as i,F as n,e as p,at as a}from"./@vue-DejhS5Sx.js";import"./element-plus-BrY0m-Us.js";import"./@vueuse-DG8PRMz9.js";import"./@element-plus-BIOyB9cn.js";import"./lodash-es-CapuB_Of.js";import"./@popperjs-Be9rlJlp.js";import"./hammerjs-uHrd7ah6.js";import"./@babel-Cpj98o6Y.js";import"./pinia-B7SS5Sce.js";import"./naive-ui-DvnQ8VCf.js";import"./seemly-BiqVPN66.js";import"./date-fns-x7VUUoCw.js";import"./evtd-CI_DDEu_.js";import"./vooks-BvrI42AR.js";import"./vueuc-DNxWDit6.js";import"./@css-render-Wpowbghw.js";import"./css-render-Ct37b3-v.js";import"./@emotion-WldOFDRm.js";import"./vdirs-DL8EOfHr.js";import"./@juggle-C8OzoCMD.js";import"./@arco-design-CcQ42w85.js";import"./number-precision-BW_FzNZC.js";import"./lodash-DBaaQlBN.js";import"./vue-router-CTzOd6h0.js";import"./jquery-awXEzGOF.js";import"./prismjs-Cy_Hpibq.js";import"./primevue-C3o8vU3d.js";import"./pinia-plugin-persistedstate-RV7uh3T-.js";/* empty css                  *//* empty css                    */const d={},c=p("h1",null,"算数运算符 Arithmetic operators",-1),l=p("p",null,"算术运算符使用数值 (字面量或者变量) 作为操作数并返回一个数值。标准的算术运算符就是加减乘除(【+】 【-】 【*】 【/】)。当操作数是浮点数时，其精确度远远不如整数。所以，不要直接判断两个浮点数是否相等！(特殊要注意的是，除零会产生Infinity)。例如：",-1),h=a('<p>除了标准的算术运算符(【+】 【-】 【*】 【/】)，JavaScript 还提供了下表中的算术运算符。</p><figure><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>求余(【%】)</td><td>二元运算符。返回相除之后的余数。</td><td>12 % 5 返回 2。</td></tr><tr><td class="nowrap">指数运算符(【**】)</td><td>计算底数(【base】)的指数(【exponent】)次方，表示为 【base^exponent】。</td><td>【2 ** 3】 返回 【8】。【10 ** -1】 返回 【0.1】。</td></tr></tbody></table></figure><h3>字符串运算符</h3><p>操作符【+】连接两个字符串值相连接，返回另一个字符串，它是两个操作数串的结合。</p>',4),_=p("p",null,"简写操作符 【+=】 也可以用来拼接字符串，例如：",-1);function u(f,g){const r=s("code");return t(),o(n,null,[c,l,e((t(),o("pre",null,[i(`1 / 2; // 0.5
1 / 2 == 1.0 / 2.0; // true`)])),[[r,void 0,"js"]]),h,e((t(),o("pre",null,[i('console.log("my " + "string"); // console logs the string "my string".')])),[[r,void 0,"js"]]),_,e((t(),o("pre",null,[i(`var myString = "alpha";

myString += "bet"; // 返回 "alphabet"`)])),[[r,void 0,"js"]])],64)}const W=m(d,[["render",u]]);export{W as default};
