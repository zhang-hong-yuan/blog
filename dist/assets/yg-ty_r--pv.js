import{_ as a}from"./index-C58PDwY0.js";import{ao as d,o as t,c as r,a4 as i,q as p,F as u,e as o,at as m}from"./@vue-DejhS5Sx.js";import"./element-plus-BrY0m-Us.js";import"./@vueuse-DG8PRMz9.js";import"./@element-plus-BIOyB9cn.js";import"./lodash-es-CapuB_Of.js";import"./@popperjs-Be9rlJlp.js";import"./hammerjs-uHrd7ah6.js";import"./@babel-Cpj98o6Y.js";import"./pinia-B7SS5Sce.js";import"./naive-ui-DvnQ8VCf.js";import"./seemly-BiqVPN66.js";import"./date-fns-x7VUUoCw.js";import"./evtd-CI_DDEu_.js";import"./vooks-BvrI42AR.js";import"./vueuc-DNxWDit6.js";import"./@css-render-Wpowbghw.js";import"./css-render-Ct37b3-v.js";import"./@emotion-WldOFDRm.js";import"./vdirs-DL8EOfHr.js";import"./@juggle-C8OzoCMD.js";import"./@arco-design-CcQ42w85.js";import"./number-precision-BW_FzNZC.js";import"./lodash-DBaaQlBN.js";import"./vue-router-CTzOd6h0.js";import"./jquery-awXEzGOF.js";import"./prismjs-Cy_Hpibq.js";import"./primevue-C3o8vU3d.js";import"./pinia-plugin-persistedstate-RV7uh3T-.js";/* empty css                  *//* empty css                    */const s={},c=o("h1",null,"比较运算符 Comparison operators",-1),l=o("p",null,"比较运算符比较它的操作数并返回一个逻辑值。操作数可以是数字，字符串，逻辑，对象值。在多数情况下，如果两个操作数不是相同的类型，JavaScript 会尝试转换它们为恰当的类型来比较。",-1),n=m('<figure><table><thead><tr><th>运算符</th><th>描述</th><th class="nowrap">返回 【true】 的示例</th></tr></thead><tbody><tr><td>等于 Equal (【==】)</td><td>如果两边操作数相等时返回 【true】。</td><td>【3 == var1】<br>【&quot;3&quot; == var1】<br>【3 == &#39;3&#39;】</td></tr><tr><td>不等于 Not equal (【!=】)</td><td>如果两边操作数不相等时返回 【true】</td><td>【var1 != 4】<br>【var2 != &quot;3&quot;】</td></tr><tr><td>全等 Strict equal (【===】)</td><td>两边操作数相等且类型相同时返回 【true】。</td><td>【3 === var1】</td></tr><tr><td>不全等 Strict not equal (【!==】)</td><td>两边操作数不相等或类型不同时返回 【true】。</td><td>【var1 !== &quot;3&quot;】<br>【3 !== &#39;3&#39;】</td></tr><tr><td>大于 Greater than (【&gt;】)</td><td>左边的操作数大于右边的操作数返回 【true】</td><td>【var2 &gt; var1】<br>【&quot;12&quot; &gt; 2】</td></tr><tr><td class="nowrap">大于等于 Greater than or equal (【&gt;=】)</td><td>左边的操作数大于或等于右边的操作数返回 【true】</td><td>【var2 &gt;= var1】<br>【var1 &gt;= 3】</td></tr><tr><td>小于 Less than (【&lt;】)</td><td>左边的操作数小于右边的操作数返回 【true】</td><td>【var1 &lt; var2】<br>【&quot;2&quot; &lt; 12】</td></tr><tr><td>小于等于 Less than or equal (【&lt;=】)</td><td>左边的操作数小于或等于右边的操作数返回 【true】</td><td>【var1 &lt;= var2】<br>【var2 &lt;= 5】</td></tr></tbody></table></figure><p>不同类型之间比较会发生隐式转换：最终把数据隐式转换转成 number 类型再比较。</p><blockquote>== 等于，会转型后再比较，18==&#39;18&#39;，结果是true</blockquote><p>NaN不等于任何值，包括它本身。(涉及到&quot;NaN“的比较都是false)</p>',4);function v(q,h){const e=d("code");return t(),r(u,null,[c,l,i((t(),r("pre",null,[p(`var var1 = 3;
var var2 = 4;`)])),[[e,void 0,"js"]]),n],64)}const U=a(s,[["render",v]]);export{U as default};
